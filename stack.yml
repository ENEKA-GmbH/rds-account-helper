AWSTemplateFormatVersion: '2010-09-09'
Description: Provides an initial Seed Bucket

Parameters:

  Prefix:
    Type: "String"
    Description: "Prefix for each Resource"
  
  ProjectSlug:
    Type: "String"
    Description: "Name of Project"

  UniqueExtension:
    Type: "String"
    Description: "String to make the resource naming unique"

  Environment:
    Type: "String"
    Description: "Environment for deployment"
    Default: "false"
    AllowedValues:
      - "development"
      - "staging"
      - "production"
      - "false"
  
  SeedStackName:
    Type: "String"
    Description: "Name of main-seed stack"

  InfrastructureStackName:
    Type: "String"
    Description: "Name of Infrastructure Stack (that provides the network)"
    Default: "false"

  CfnNotificationTopicArn:
    Type: "String"
    Description: "Cloudformation Notification Topic Arn"
    Default: "false"

  FlagAutouseCidashNotificationTopic:
    Type: "String"
    Description: "Automatic usage of Cidash SNS Notification Topic"
    Default: "false"

  FeatureFlagSns2Slack:
    Type: "String"
    Description: "Add SNS Lambda Subscriber to Slack" 
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  FeatureFlagMysqlLambdaLayer:
    Type: "String"
    Description: "Create pymysql lambda layer stack" 
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  FeatureFlagPostgresLambdaLayer:
    Type: "String"
    Description: "Create psycopg2 lambda layer stack" 
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  FeatureFlagCloudTrail:
    Type: "String"
    Description: "Activate CloudTrail Deployment"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  FeatureFlagRah:
    Type: "String"
    Description: "Add a Custom CFN Resource that allowes to create additional Users on RDS Databases"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  FeatureFlagCostCredential:
    Type: "String"
    Description: "Creates Credentials for external Monitoring Systems that only allows to get Costs and Billing Information"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  FeatureFlagNukeCredential:
    Type: "String"
    Description: "Creates Credentials for account nuking"
    AllowedValues:
      - "true"
      - "false"
    Default: "false"

  MysqlLambdaLayerArn:
    Type: "String"
    Default: "false"
    Description: "ARN of Mysql Lambda Layer. Only needed, if FeatureFlagMysqlLambdaLayer is false but FeatureFlagRah is true"


  PostgresLambdaLayerArn:
    Type: "String"
    Default: "false"
    Description: "ARN of Postgres Lambda Layer. Only needed, if FeatureFlagPostgresLambdaLayer is false but FeatureFlagRah is true"


Conditions:

  HasEnvironment:
    Fn::Not:
      - Fn::Equals:
          - "false"
          - !Ref "Environment"

  FlagNotify:
    Fn::Or:
      - Fn::Not:
          - Fn::Equals:
              - "false"
              - !Ref "CfnNotificationTopicArn"
      - Fn::Equals:
          - "true"
          - !Ref "FlagAutouseCidashNotificationTopic"

  FlagAutouseCidashNotificationTopic:
    Fn::Equals:
      - "true"
      - !Ref "FlagAutouseCidashNotificationTopic"

  FeatureFlagSns2Slack:
    Fn::Equals:
      - "true"
      - !Ref "FeatureFlagSns2Slack"

  FeatureFlagMysqlLambdaLayer:
    Fn::Equals:
      - "true"
      - !Ref "FeatureFlagMysqlLambdaLayer"

  FeatureFlagPostgresLambdaLayer:
    Fn::Equals:
      - "true"
      - !Ref "FeatureFlagPostgresLambdaLayer"

  FeatureFlagCloudTrail:
    Fn::Equals:
      - "true"
      - !Ref "FeatureFlagCloudTrail"

  FeatureFlagRah:
    Fn::Equals:
      - "true"
      - !Ref "FeatureFlagRah"

  FeatureFlagCostCredential:
    Fn::Equals:
      - "true"
      - !Ref "FeatureFlagCostCredential"

  FeatureFlagNukeCredential:
    Fn::Equals:
      - "true"
      - !Ref "FeatureFlagNukeCredential"

  MysqlDependencieRah:
    Fn::And:
      - Fn::Equals:
          - !Ref "FeatureFlagMysqlLambdaLayer"
          - "false"
      - Fn::Not:
          - Fn::Equals:
              - !Ref "FeatureFlagRah"
              - "false"

  PostgresDependencieRah:
    Fn::And:
      - Fn::Equals:
          - !Ref "FeatureFlagPostgresLambdaLayer"
          - "false"
      - Fn::Not:
          - Fn::Equals:
              - !Ref "FeatureFlagRah"
              - "false"
Resources:

  CloudTrailStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: "FeatureFlagCloudTrail"
    Properties:
      NotificationARNs:
        - Fn::If:
            - "FlagNotify"
            - Fn::If:
                - "FlagAutouseCidashNotificationTopic"
                - !ImportValue "cidashTopicArn"
                - !Ref "CfnNotificationTopicArn"
            - !Ref "AWS::NoValue" 
      TemplateURL: 
        Fn::Join:
          - "/"
          - - "https:/"
            - Fn::ImportValue:
                !Join [":", [ !Ref "SeedStackName", "SeedBucketDomainName"]]
            - Fn::If:
                - "HasEnvironment"
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "Environment", !Ref "UniqueExtension" ]]
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "UniqueExtension" ]]
            - !Ref "AWS::StackName"
            - "stack/cloudtrail.yml"
      Parameters:
        Prefix: !Ref "Prefix"
        UniqueExtension: !Ref "UniqueExtension"
        ProjectSlug: !Ref "ProjectSlug"
        Environment: !Ref "Environment"

  Sns2SlackStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: "FeatureFlagSns2Slack"
    Properties: 
      NotificationARNs:
        - Fn::If:
            - "FlagNotify"
            - Fn::If:
                - "FlagAutouseCidashNotificationTopic"
                - !ImportValue "cidashTopicArn"
                - !Ref "CfnNotificationTopicArn"
            - !Ref "AWS::NoValue" 
      TemplateURL: 
        Fn::Join:
          - "/"
          - - "https:/"
            - Fn::ImportValue:
                !Join [":", [ !Ref "SeedStackName", "SeedBucketDomainName"]]
            - Fn::If:
                - "HasEnvironment"
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "Environment", !Ref "UniqueExtension" ]]
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "UniqueExtension" ]]
            - !Ref "AWS::StackName"
            - "stack/sns2slack.yml"
      Parameters:
        MainStackName: !Ref "AWS::StackName"
        SeedStackName: !Ref "SeedStackName"
        Prefix: !Ref "Prefix"
        UniqueExtension: !Ref "UniqueExtension"
        ProjectSlug: !Ref "ProjectSlug"
        Environment: !Ref "Environment"
        CfnNotificationTopicArn: !Ref "CfnNotificationTopicArn"

  PostgresLambdaLayerStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: "FeatureFlagPostgresLambdaLayer"
    Properties:
      TimeoutInMinutes: 5
      NotificationARNs:
        - Fn::If:
            - "FlagNotify"
            - Fn::If:
                - "FlagAutouseCidashNotificationTopic"
                - !ImportValue "cidashTopicArn"
                - !Ref "CfnNotificationTopicArn"
            - !Ref "AWS::NoValue" 
      TemplateURL: 
        Fn::Join:
          - "/"
          - - "https:/"
            - Fn::ImportValue:
                !Join [":", [ !Ref "SeedStackName", "SeedBucketDomainName"]]
            - Fn::If:
                - "HasEnvironment"
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "Environment", !Ref "UniqueExtension" ]]
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "UniqueExtension" ]]
            - !Ref "AWS::StackName"
            - "rah/infrastructure_as_code/cloudformation/lambda_layer.yml"
      Parameters:
        LayerName: "postgresql-layer"
        LayerS3BucketName:
          Fn::ImportValue:
            !Join [ ":", [ !Ref "SeedStackName", "SeedBucketName" ] ]
        LayerS3BucketKey:
          Fn::If:
            - "HasEnvironment"
            - Fn::Join:
                - "/"
                - - !Ref "Prefix" 
                  - !Ref "ProjectSlug"
                  - !Ref "Environment"
                  - !Ref "UniqueExtension"
                  - !Ref "AWS::StackName"
                  - "build/postgres-layer.zip"
            - Fn::Join:
                - "/"
                - - !Ref "Prefix" 
                  - !Ref "ProjectSlug"
                  - !Ref "UniqueExtension"
                  - !Ref "AWS::StackName"
                  - "build/postgres-layer.zip"


  MysqlLambdaLayerStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: "FeatureFlagMysqlLambdaLayer"
    Properties:
      TimeoutInMinutes: 5
      NotificationARNs:
        - Fn::If:
            - "FlagNotify"
            - Fn::If:
                - "FlagAutouseCidashNotificationTopic"
                - !ImportValue "cidashTopicArn"
                - !Ref "CfnNotificationTopicArn"
            - !Ref "AWS::NoValue" 
      TemplateURL: 
        Fn::Join:
          - "/"
          - - "https:/"
            - Fn::ImportValue:
                !Join [":", [ !Ref "SeedStackName", "SeedBucketDomainName"]]
            - Fn::If:
                - "HasEnvironment"
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "Environment", !Ref "UniqueExtension" ]]
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "UniqueExtension" ]]
            - !Ref "AWS::StackName"
            - "rah/infrastructure_as_code/cloudformation/lambda_layer.yml"
      Parameters:
        LayerName: "mysql-layer"
        LayerS3BucketName:
          Fn::ImportValue:
            !Join [ ":", [ !Ref "SeedStackName", "SeedBucketName" ] ]
        LayerS3BucketKey:
          Fn::If:
            - "HasEnvironment"
            - Fn::Join:
                - "/"
                - - !Ref "Prefix" 
                  - !Ref "ProjectSlug"
                  - !Ref "Environment"
                  - !Ref "UniqueExtension"
                  - !Ref "AWS::StackName"
                  - "build/mysql-layer.zip"
            - Fn::Join:
                - "/"
                - - !Ref "Prefix" 
                  - !Ref "ProjectSlug"
                  - !Ref "UniqueExtension"
                  - !Ref "AWS::StackName"
                  - "build/mysql-layer.zip"

  RahStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: "FeatureFlagRah"
    Properties: 
      TimeoutInMinutes: 5
      NotificationARNs:
        - Fn::If:
            - "FlagNotify"
            - Fn::If:
                - "FlagAutouseCidashNotificationTopic"
                - !ImportValue "cidashTopicArn"
                - !Ref "CfnNotificationTopicArn"
            - !Ref "AWS::NoValue" 
      TemplateURL: 
        Fn::Join:
          - "/"
          - - "https:/"
            - Fn::ImportValue:
                !Join [":", [ !Ref "SeedStackName", "SeedBucketDomainName"]]
            - Fn::If:
                - "HasEnvironment"
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "Environment", !Ref "UniqueExtension" ]]
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "UniqueExtension" ]]
            - !Ref "AWS::StackName"
            - "rah/infrastructure_as_code/cloudformation/cfn_custom_rah.yml"
      Parameters:
        LambdaS3BucketName:
          Fn::ImportValue:
            !Join [ ":", [ !Ref "SeedStackName", "SeedBucketName" ] ]
        LambdaS3BucketKey:
          Fn::If:
            - "HasEnvironment"
            - Fn::Join:
                - "/"
                - - !Ref "Prefix" 
                  - !Ref "ProjectSlug"
                  - !Ref "Environment"
                  - !Ref "UniqueExtension"
                  - !Ref "AWS::StackName"
                  - "build/rah.zip"
            - Fn::Join:
                - "/"
                - - !Ref "Prefix" 
                  - !Ref "ProjectSlug"
                  - !Ref "UniqueExtension"
                  - !Ref "AWS::StackName"
                  - "build/rah.zip"

        MysqlLambdaLayerArn:
          Fn::If:
            - "MysqlDependencieRah"
            - !Ref "MysqlLambdaLayerArn"
            - !GetAtt "MysqlLambdaLayerStack.Outputs.LambdaLayerArn"
        PostgresLambdaLayerArn:
          Fn::If:
            - "PostgresDependencieRah"
            - !Ref "PostgresLambdaLayerArn"
            - !GetAtt "PostgresLambdaLayerStack.Outputs.LambdaLayerArn"
        VpcId:
          Fn::ImportValue:
            !Join [ ":", [ !Ref "InfrastructureStackName", "VpcId" ] ]
        SubnetIds:
          Fn::Join:
            - ","
            - - Fn::ImportValue:
                  !Join [ ":", [ !Ref "InfrastructureStackName", "PrivateSubnetOne" ] ]
              - Fn::ImportValue:
                  !Join [ ":", [ !Ref "InfrastructureStackName", "PrivateSubnetTwo" ] ]


  CostCredentialStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: "FeatureFlagCostCredential"
    Properties: 
      NotificationARNs:
        - Fn::If:
            - "FlagNotify"
            - Fn::If:
                - "FlagAutouseCidashNotificationTopic"
                - !ImportValue "cidashTopicArn"
                - !Ref "CfnNotificationTopicArn"
            - !Ref "AWS::NoValue" 
      TemplateURL: 
        Fn::Join:
          - "/"
          - - "https:/"
            - Fn::ImportValue:
                !Join [":", [ !Ref "SeedStackName", "SeedBucketDomainName"]]
            - Fn::If:
                - "HasEnvironment"
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "Environment", !Ref "UniqueExtension" ]]
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "UniqueExtension" ]]
            - !Ref "AWS::StackName"
            - "stack/cost_credential.yml"
      Parameters:
        MainStackName: !Ref "AWS::StackName"
        SeedStackName: !Ref "SeedStackName"
        UniqueExtension: !Ref "UniqueExtension"
        ProjectSlug: !Ref "ProjectSlug"

  NukeCredentialStack:
    Type: "AWS::CloudFormation::Stack"
    Condition: "FeatureFlagNukeCredential"
    Properties:
      NotificationARNs:
        - Fn::If:
            - "FlagNotify"
            - Fn::If:
                - "FlagAutouseCidashNotificationTopic"
                - !ImportValue "cidashTopicArn"
                - !Ref "CfnNotificationTopicArn"
            - !Ref "AWS::NoValue"
      TemplateURL:
        Fn::Join:
          - "/"
          - - "https:/"
            - Fn::ImportValue:
                !Join [":", [ !Ref "SeedStackName", "SeedBucketDomainName"]]
            - Fn::If:
                - "HasEnvironment"
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "Environment", !Ref "UniqueExtension" ]]
                - !Join [ "/", [ !Ref "Prefix", !Ref "ProjectSlug", !Ref "UniqueExtension" ]]
            - !Ref "AWS::StackName"
            - "stack/nuke_credential.yml"
      Parameters:
        MainStackName: !Ref "AWS::StackName"
        SeedStackName: !Ref "SeedStackName"
        UniqueExtension: !Ref "UniqueExtension"
        ProjectSlug: !Ref "ProjectSlug"


Outputs:

  RahCustomCfnResourceArn:
    Condition: "FeatureFlagRah"
    Value: !GetAtt "RahStack.Outputs.CustomCfnResourceFunctionArn"
    Export:
      Name: !Join [ ":", [ !Ref "InfrastructureStackName", "RahCustomCfnResourceArn" ] ]


  RahSecurityGroupId:
    Condition: "FeatureFlagRah"
    Value: !GetAtt "RahStack.Outputs.SecurityGroupId"
    Export:
      Name: !Join [ ":", [ !Ref "InfrastructureStackName", "RahSecurityGroupId" ] ] 

