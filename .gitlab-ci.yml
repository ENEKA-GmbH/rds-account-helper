image: firecyberice/docker-toolbox:latest
stages:
  - manual
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: 1



before_script: &beforescript
  - apk add zip
  - pip3 install boto3
  - curl -v -L -o /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.22.1/yq_linux_amd64
  - chmod  a+x /usr/bin/yq
  - eval $(aws sts assume-role --role-arn ${AWS_ROLE_ARN} --role-session-name cipipeline | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)\n"')

deploy-development:account-service:
  stage: manual
  when: manual
  variables:
    AWS_DEFAULT_REGION: eu-central-1
    DEFAULT_ECS_CLUSTER: eep-infrastructure-ecs-ec2-cluster
    SCOPE: "ACCOUNT_SERVICE_"
    AWS_ACCESS_KEY_ID: $AWS_ENK_DEVELOPMENT_ACCOUNT_SERVICE_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_ENK_DEVELOPMENT_ACCOUNT_SERVICE_AWS_SECRET_ACCESS_KEY
    AWS_ROLE_ARN: $AWS_ENK_DEVELOPMENT_ACCOUNT_SERVICE_AWS_ROLE_ARN
    ENVIRONMENT_NAME: "DEVELOPMENT"
  cache:
    untracked: true
    policy: pull-push
    paths:
      - build/*
      - .cache_exists
    key: rah-build
  services:
    - docker:dind
  script:
    - |
      if [ -f .cache_exists ]; then
        make deploy-only STACK_DIR=$(pwd)/ PARAMETER_FILE=$(printenv "AWS_ENK_${ENVIRONMENT_NAME^^}_${SCOPE^^}PARAMETER_FILE")
      else
        make deploy STACK_DIR=$(pwd)/ PARAMETER_FILE=$(printenv "AWS_ENK_${ENVIRONMENT_NAME^^}_${SCOPE^^}PARAMETER_FILE")
      fi
  artifacts:
    reports:
      dotenv: build.env
    paths:
      - build/*
  environment:
    name: development/account-service
    action: start
