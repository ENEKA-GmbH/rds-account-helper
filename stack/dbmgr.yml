Parameters:

  MainStackName:
    Type: "String"
    Description: "Name of Parrent Stack"

  Prefix:
    Type: "String"
    Description: "Prefix for each Resource"
  
  ProjectSlug:
    Type: "String"
    Description: "Name of Project"

  Environment:
    Type: "String"
    Description: "Environment for deployment"
    AllowedValues:
      - "development"
      - "staging"
      - "production"
  
  SeedStackName:
    Type: "String"
    Description: "Name of main-seed stack"

  InfrastructureStackName:
    Type: "String"
    Description: "Name of Infrastructure Stack"

  UniqueExtension:
    Type: "String"
    Description: "String to make the resource naming unique"

  PyMysqlLambdaLayer:
    Type: "String"
    Description: "Pymysql lambda layer"

Resources:


  DatabaseCredentialApiRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "CloudWatchLogs"
          PolicyDocument:
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:GetLogEvents"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
                Effect: "Allow"
              - Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
                Effect: "Allow"
        - PolicyName: "SecretAccess"
          PolicyDocument:
            Statement:
              Action: "secretsmanager:*"
              Effect: "Allow"
              Resource: "*"
  
  DbCredentialsCreateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Dbmgr Security Group"
      VpcId: 
        Fn::ImportValue:
          !Join [":", [ !Ref "InfrastructureStackName", "VpcId"]]

  DbCredentialsCreateLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: "DbCredentialsCreateLambda"
      Code:
        S3Bucket:
          Fn::ImportValue:
            !Join [ ':', [ !Ref 'SeedStackName', 'SeedBucketName' ]]
        S3Key: 
          Fn::Join:
            - "/"
            - - !Ref "Prefix" 
              - !Ref "ProjectSlug"
              - !Ref "Environment"
              - !Ref "MainStackName"
              - !Ref "UniqueExtension"
              - !Ref "MainStackName"
              - "build/dbmgr.zip"
      Handler: "index.handler"
      Runtime: "python3.7"
      Timeout: 120
      Role: !GetAtt "DatabaseCredentialApiRole.Arn"
      VpcConfig:
        SubnetIds:
          - Fn::ImportValue:
              !Join [":", [ !Ref "InfrastructureStackName", "PrivateSubnetOne"]]
          - Fn::ImportValue:
              !Join [":", [ !Ref "InfrastructureStackName", "PrivateSubnetTwo"]]
        SecurityGroupIds:
          - !Ref 'DbCredentialsCreateSecurityGroup'
      Layers:
          - !Ref 'PyMysqlLambdaLayer'


